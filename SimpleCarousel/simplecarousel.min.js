window.SimpleCarousel||(window.SimpleCarousel=function(){"use strict";var e;function y(){return"undefined"!=typeof Promise&&Promise.defer?Promise.defer():"undefined"!=typeof PromiseUtils&&PromiseUtils.defer?PromiseUtils.defer():(this.resolve=null,this.reject=null,this.promise=new Promise(function(e,n){this.resolve=e,this.reject=n}.bind(this)),void Object.freeze(this))}!function(){for(var i=0,e=["ms","moz","webkit","o"],n=0;n<e.length&&!window.requestAnimationFrame;++n)window.requestAnimationFrame=window[e[n]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[e[n]+"CancelAnimationFrame"]||window[e[n]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(e,n){var t=(new Date).getTime(),a=Math.max(0,16-(t-i)),r=window.setTimeout(function(){e(t+a)},a);return i=t+a,r}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})}(),e=function(){var n=setTimeout;function a(){}function i(e){if(!(this instanceof i))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],u(e,this)}function r(t,a){for(;3===t._state;)t=t._value;0!==t._state?(t._handled=!0,i._immediateFn(function(){var e=1===t._state?a.onFulfilled:a.onRejected;if(null!==e){var n;try{n=e(t._value)}catch(e){return void l(a.promise,e)}o(a.promise,n)}else(1===t._state?o:l)(a.promise,t._value)})):t._deferreds.push(a)}function o(n,e){try{if(e===n)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var t=e.then;if(e instanceof i)return n._state=3,n._value=e,void s(n);if("function"==typeof t)return void u((a=t,r=e,function(){a.apply(r,arguments)}),n)}n._state=1,n._value=e,s(n)}catch(e){l(n,e)}var a,r}function l(e,n){e._state=2,e._value=n,s(e)}function s(e){2===e._state&&0===e._deferreds.length&&i._immediateFn(function(){e._handled||i._unhandledRejectionFn(e._value)});for(var n=0,t=e._deferreds.length;n<t;n++)r(e,e._deferreds[n]);e._deferreds=null}function c(e,n,t){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof n?n:null,this.promise=t}function u(e,n){var t=!1;try{e(function(e){t||(t=!0,o(n,e))},function(e){t||(t=!0,l(n,e))})}catch(e){if(t)return;t=!0,l(n,e)}}i.prototype.catch=function(e){return this.then(null,e)},i.prototype.then=function(e,n){var t=new this.constructor(a);return r(this,new c(e,n,t)),t},i.prototype.finally=function(n){var t=this.constructor;return this.then(function(e){return t.resolve(n()).then(function(){return e})},function(e){return t.resolve(n()).then(function(){return t.reject(e)})})},i.all=function(n){return new i(function(a,r){if(!n||void 0===n.length)throw new TypeError("Promise.all accepts an array");var i=Array.prototype.slice.call(n);if(0===i.length)return a([]);var o=i.length;function l(n,e){try{if(e&&("object"==typeof e||"function"==typeof e)){var t=e.then;if("function"==typeof t)return void t.call(e,function(e){l(n,e)},r)}i[n]=e,0==--o&&a(i)}catch(e){r(e)}}for(var e=0;e<i.length;e++)l(e,i[e])})},i.resolve=function(n){return n&&"object"==typeof n&&n.constructor===i?n:new i(function(e){e(n)})},i.reject=function(t){return new i(function(e,n){n(t)})},i.race=function(r){return new i(function(e,n){for(var t=0,a=r.length;t<a;t++)r[t].then(e,n)})},i._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){n(e,0)},i._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};var e=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw new Error("unable to locate global object")}();e.Promise||(e.Promise=i)},"object"==typeof exports&&"undefined"!=typeof module?e():"function"==typeof define&&define.amd?define(e):e();var o=!0,l=0,c=null,u=null,s=!1,f=!0,d=300,r=!1,i=1e4,v=!0,h=!1,p=!0,m=!0,w=!0,n={},g={container:null,list:null,navTarget:null,navContainer:null,navDots:null},t="simple-carousel",b={container:t+"-container",list:t+"-list",slide:t+"-slide",focus:t+"-focus",nextFocus:t+"-next-focus",navContainer:t+"-nav-container",navOverlay:t+"-nav-container-overlay",navAutoHide:t+"-nav-autohide",navAppend:t+"-nav-append",navBar:t+"-nav-bar",navNextContainer:t+"-nav-next-container",navNext:t+"-nav-next",navPrevContainer:t+"-nav-prev-container",navPrev:t+"-nav-prev",navDotsContainer:t+"-nav-dots-container",navDots:t+"-nav-dots",navDot:t+"-nav-dot",navDotActive:t+"-nav-dot-active"},x={navBar_render:null,next:null,next_click:null,next_clicked:null,prev:null,prev_click:null,prev_clicked:null,transition:null,dots_click:null,dots_clicked:null,rotate:null};function a(e,n){var t=typeof n;switch(e){case"container":case"id":if("string"===t)n,g.container=document.getElementById(n);else if("object"===t)try{n instanceof HTMLElement?g.container=n:(n instanceof HTMLCollection||n instanceof NodeList)&&0<n.length?g.container=n[0]:n instanceof jQuery&&0<n.length&&(g.container=n[0]),g.container&&g.container.getAttribute&&(g.container.getAttribute("id")||"")}catch(e){}break;case"css":if("string"===t)b.container+=" "+n;else if("object"===t)for(var a in n)n.hasOwnProperty(a)&&b.hasOwnProperty(a)&&(b[a]+=" "+n[a]);break;case"width":"number"===t&&10<n&&(c=parseInt(n,10));break;case"height":"number"===t&&10<n&&(u=parseInt(n,10));break;case"infinite":"boolean"===t&&(o=n);break;case"resize":case"resizeFrame":case"resize-frame":"boolean"===t&&(s=n);break;case"index":"number"===t&&0<=n&&(l=parseInt(n,10));break;case"animate":"boolean"===t&&(f=n);break;case"animationduration":case"animationDuration":"number"===t&&0<n&&(d=parseInt(n,10));break;case"autorotate":case"autoRotate":"boolean"===t&&(r=n);break;case"delay":case"autorotatedelay":case"autoRotateDelay":case"autorotatedelaymilliseconds":case"autoRotateDelayMilliseconds":"number"===t&&0<=n&&(i=Math.round(n));break;case"width":"number"===t&&(c=n);break;case"nav":"boolean"===t&&(w=m=p=n);break;case"navnext":case"navNext":"boolean"===t&&(p=n);break;case"navprev":case"navPrev":"boolean"===t&&(m=n);break;case"dots":case"navdots":case"navDots":"boolean"===t&&(w=n);break;case"overlay":case"navoverlay":case"navOverlay":"boolean"===t&&(v=n);break;case"autohide":case"autoHide":case"navautohide":case"navAutohide":case"navAutoHide":"boolean"===t&&(h=n);break;case"navcontainer":case"navContainer":case"navtarget":case"navTarget":try{"string"===t?g.navTarget=document.getElementById(n):"object"===t&&(n instanceof HTMLElement?g.navTarget=n:(n instanceof HTMLCollection||n instanceof NodeList)&&0<n.length?g.navTarget=n[0]:n instanceof jQuery&&0<n.length&&(g.navTarget=n[0]))}catch(e){}break;default:"function"===t&&x.hasOwnProperty(e)&&(x[e]=n)}}function C(e){"boolean"!=typeof e&&(e=f);var n=g.list.children,t=n.length;l<0&&(l=0),t<=l&&(l=t-1),0!==t&&(H(n,b.nextFocus),H(n,b.focus),n[l].style.left="0px",M(n[l],[b.slide,b.focus]),P(),s&&R(g.list.querySelectorAll("."+b.focus),!1))}function _(e,n){"boolean"!=typeof n&&(n=f);var t=new y,a=g.list.children.length;if(l<0&&(l=0),a<=l&&(l=a-1),e<0&&(e=0),a<=e&&(e=a-1),O("transition",[l,e,g.list.children],g.list.children[e]),e!==l)if(n){var r=l<e?A:k,i=function(){r().then(function(){e!==l?i():t.resolve(l)})};i()}else l=e,C(),t.resolve(l);else t.resolve(l);return t.promise}function A(e){"boolean"!=typeof e&&(e=f);var n=new y,t=g.list.children,a=t.length;l<0&&(l=0),a<=l&&(l=a-1);var r=Math.max(l+1,0);if(o?a<=r&&(r=0):a<=r&&(r=a-1),O("next",[l,r,g.list.children],g.list.children[r]),r!==l)if(e){M(t[r],b.nextFocus);var i=N(t[r]);B(t[r]);t[r].style.left=i+"px",s&&R(t[r],e),z(t[l],"left",0-i+"px",d).then(function(e){H(e,b.focus)}),z(t[r],"left","0px",d).then(function(e){M(e,b.focus),H(e,b.nextFocus),l=r,n.resolve(l)}),P(r)}else l=r,C(),n.resolve(l);else n.resolve(l);return n.promise}function k(e){"boolean"!=typeof e&&(e=f);var n=new y,t=g.list.children,a=t.length;l<0&&(l=0),a<=l&&(l=a-1);var r=l-1;if(o?r<0&&(r=a-1):r<0&&(r=0),O("prev",[l,r,g.list.children],g.list.children[r]),r!==l)if(e){M(t[r],b.nextFocus);var i=N(t[r]);B(t[r]);t[r].style.left=0-i+"px",s&&R(t[r],e),z(t[l],"left",i+"px",d).then(function(e){H(e,b.focus)}),z(t[r],"left","0px",d).then(function(e){M(e,b.focus),H(e,b.nextFocus),l=r,n.resolve(l)}),P(r)}else l=r,C(),n.resolve(l);else n.resolve(l);return n.promise}function j(){if(m||p||w){g.navContainer=U("div",{class:b.navContainer});var e,n,t=U("div",{class:b.navBar}),a=U("div",{class:b.navPrevContainer}),r=U("div",{class:b.navNextContainer}),i=U("div",{class:b.navDotsContainer});m&&(e=U("div",{class:b.navPrev}),a.appendChild(e),a.addEventListener("click",L,!1)),w&&(g.navDots=U("ul",{class:b.navDots}),i.appendChild(g.navDots),T(),P()),p&&(n=U("div",{class:b.navNext}),r.appendChild(n),r.addEventListener("click",I,!1)),v&&M(g.navContainer,b.navOverlay),v&&h&&M(g.navContainer,b.navAutoHide),t.appendChild(a),t.appendChild(i),t.appendChild(r),g.navContainer.appendChild(t),O("navBar_render",[l,t],g.navContainer),null!==g.navTarget||v||M(g.container,b.navAppend),(g.navTarget||g.container).appendChild(g.navContainer)}}function T(){if(g.navDots instanceof HTMLElement){var e=g.list.children.length;g.navDots.innerHTML="";for(var n=0;n<e;n++){var t=U("li",{class:b.navDot,"data-index":n});t.addEventListener("click",E,!1),g.navDots.append(t)}}}function P(e){if(g.navDots instanceof HTMLElement){"number"!=typeof e&&(e=l);var n=g.list.children,t=g.navDots.children;if(n.length!==t.length)return T(),void P();0!==n.length&&(e<0&&(e=0),e>=t.length&&(e=t.length-1),H(t,b.navDotActive),M(t[e],b.navDotActive))}}function F(){D(),n.autoRotate=setTimeout(function(){D();var e=function(){O("rotate",[l,g.list.children],g.list.children[l]),F()};o?A().then(e):l>=g.list.children.length-1?_(0).then(e):A().then(e)},i)}function D(){clearTimeout(n.autoRotate)}function I(e){D();var n=e||window.event,t=e.target||e.srcElement;O("next_click",[n,l,g.navContainer],t),A().then(function(){O("next_clicked",[n,l,g.navContainer],t)})}function L(e){D();var n=e||window.event,t=e.target||e.srcElement;O("prev_click",[n,l,g.navContainer],t),k().then(function(){O("prev_clicked",[n,l,g.navContainer],t)})}function E(e){D();var n=e||window.event,t=e.target||e.srcElement,a=parseInt(t.getAttribute("data-index")||-1,10);O("dots_click",[n,a,g.navContainer],t),-1<a&&_(a).then(function(){O("dots_clicked",[n,l,g.navContainer],t)})}function O(n,e,t){if(x.hasOwnProperty(n)&&"function"==typeof x[n])try{x[n].apply(t,e)}catch(e){console&&console.error("SimpleCarousel: An error occured while executing '"+n+"' callback: ",e)}}function R(e,n){"boolean"!=typeof n&&(n=f);for(var t=c,a=u,r=e.hasOwnProperty(length)?e:[e],i=0;i<r.length;i++){var o=r[i];t=Math.max(t,N(o)),a=Math.max(a,B(o))}n?(z(g.container,"width",t+"px"),z(g.container,"height",a+"px")):(g.container.style.width=t+"px",g.container.style.height=a+"px")}function M(e,n){if("string"==typeof n&&(n=[n]),n instanceof Array){q(e)||(e=[e]);for(var t=0;t<n.length;t++)for(var a=n[t].split(" "),r=0;r<a.length;r++)for(var i=a[r],o=0;o<e.length;o++){var l=e[o];i&&!S(l,i)&&l.classList.add(i)}}}function H(e,n){if("string"==typeof n&&(n=[n]),n instanceof Array){q(e)||(e=[e]);for(var t=0;t<n.length;t++)for(var a=n[t].split(" "),r=0;r<a.length;r++)for(var i=a[r],o=0;o<e.length;o++){var l=e[o];i&&S(l,i)&&l.classList.remove(i)}}}function S(e,n){return e.classList.contains(n)}function q(e){if("object"==typeof e&&e.hasOwnProperty("length"))return!0;for(var n=[Array,HTMLCollection,NodeList],t=0;t<n.length;t++)if(e instanceof n[t])return!0;return!1}function N(e){var n=window.getComputedStyle(e)||e.currentStyle;return e.offsetWidth+parseInt(n.marginLeft,10)+parseInt(n.marginRight,10)}function B(e){var n=window.getComputedStyle(e)||e.currentStyle;return e.offsetHeight+parseInt(n.marginTop,10)+parseInt(n.marginBottom,10)}function z(a,r,e,i){var o=new y;if("string"!=typeof r)return o.reject("Invalid 'prop' argument!"),o.promise;if(!a.style)return o.reject("Invalid 'elem' argument! Not a DOM object"),o.promise;"number"!=typeof i&&(i=300);var n=window.getComputedStyle(a),t="data-orig-position";-1<["top","bottom","left","right"].indexOf(r)&&(a.hasAttribute(t)||a.setAttribute(t,n.position),a.style.position="absolute");var l=null,s=/[^\d]+$/i,c=(s.exec(e+"")||[""])[0],u=parseInt(n[r]||0,10),f=parseInt(e,10),d=(f-u)/i,v=u<=f,h=u;c||(c=(s.exec(n[r])||[""])[0]);var p="data-orig-"+r.toLowerCase(),m="data-last-"+r.toLowerCase();if(a.hasAttribute(p)||a.setAttribute(p,u+c),a.setAttribute(m,u+c),u===f)return a.style[r]=f+(c||0),o.resolve(a),o.promise;return window.requestAnimationFrame(function e(n){l||(l=n);var t=n-l;if(l=n,0<(i-=t))return h+=t*d,(v&&f<h||!v&&h<f)&&(h=f),a.style[r]=h+(c||0),void(h!==f&&window.requestAnimationFrame(e));a.style[r]=f+(c||0),o.resolve(a)}),o.promise}function U(e,n){var t=document.createElement(e);for(var a in n=n||{})n.hasOwnProperty(a)&&t.setAttribute(a,n[a]);return t}var Q=function(){var e={};return Object.defineProperties(e,{next:{enumerable:!0,writable:!1,value:A},prev:{enumerable:!0,writable:!1,value:k},transitionTo:{enumerable:!0,writable:!1,value:_},startAutoRotate:{enumerate:!0,writable:!1,value:F},stopAutoRotate:{enumerate:!0,writable:!1,value:D}}),Object.freeze(e),e};function W(e){var n=new Q;for(var t in e=e||{})e.hasOwnProperty(t)&&a(t,e[t]);return"object"==typeof g.container&&(g.list=g.container.children[0],M(g.container,b.container),M(g.list,b.list),M(g.list.children,b.slide),function(){var e=window.getComputedStyle(g.container)||g.container.currentStyle,n={width:e.width,height:e.height};null===c&&(c=parseInt(n.width,10)),null===u&&(u=parseInt(n.height,10)),g.container.style.width=c+"px",g.container.style.height=u+"px";for(var t=0;t<g.list.children.length;t++){var a=g.list.children[t],r=window.getComputedStyle(a),i=parseInt(r.paddingLeft||0,10),o=parseInt(r.paddingRight||0,10),l=parseInt(r.paddingTop||0,10),s=parseInt(r.paddingBottom||0,10);a.style.width||(a.style.width=c-i-o+"px"),a.style.height||(a.style.height=u-l-s+"px")}}(),j(),C(!1),r&&F()),n}return Object.defineProperties(Q,{}),Object.freeze(W),W}());
//# sourceMappingURL=data:application/json;charset=utf8;base64,
